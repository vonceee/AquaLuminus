@file:OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)

package com.example.aqualuminus.ui.screens.schedule

import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ExperimentalLayoutApi
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.aqualuminus.ui.screens.schedule.components.DaySelector
import com.example.aqualuminus.ui.screens.schedule.components.DurationPicker
import com.example.aqualuminus.ui.screens.schedule.components.ScheduleBottomBar
import com.example.aqualuminus.ui.screens.schedule.components.ScheduleNameInput
import com.example.aqualuminus.ui.screens.schedule.components.TimePicker
import com.example.aqualuminus.ui.screens.schedule.model.SavedSchedule
import java.util.Calendar

@Composable
fun ScheduleCleanScreen(
    onBackClick: () -> Unit = {}
) {
    // Get the context using LocalContext
    val context = LocalContext.current
    val viewModel: ScheduleViewModel = viewModel(
        factory = ScheduleViewModelFactory(context = context)
    )

    val currentTime = Calendar.getInstance()
    var selectedHour by remember { mutableIntStateOf(currentTime.get(Calendar.HOUR)) }
    var selectedMinute by remember { mutableIntStateOf(currentTime.get(Calendar.MINUTE)) }
    var selectedAmPm by remember { mutableIntStateOf(if (currentTime.get(Calendar.AM_PM) == Calendar.AM) 0 else 1) }
    var selectedDays by remember { mutableStateOf(setOf<Int>()) }
    var scheduleName by remember { mutableStateOf("") }
    var selectedDuration by remember { mutableIntStateOf(30) } // Default 30 minutes

    val daysFullNames = listOf("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
    val snackbarHostState = remember { SnackbarHostState() }

    // Observe ViewModel states
    val isLoading by viewModel.isLoading.collectAsState()
    val saveResult by viewModel.saveResult.collectAsState()
    val error by viewModel.error.collectAsState()

    // Handle save result
    LaunchedEffect(saveResult) {
        when (saveResult) {
            is ScheduleViewModel.SaveResult.Success -> {
                snackbarHostState.showSnackbar("Schedule saved successfully!")
                viewModel.clearSaveResult()
                onBackClick()
            }
            is ScheduleViewModel.SaveResult.Error -> {
                snackbarHostState.showSnackbar("Error: ${(saveResult as ScheduleViewModel.SaveResult.Error).message}")
                viewModel.clearSaveResult()
            }
            null -> { /* No action needed */ }
        }
    }

    // Handle errors
    LaunchedEffect(error) {
        error?.let {
            snackbarHostState.showSnackbar("Error: $it")
            viewModel.clearError()
        }
    }

    val onSaveClick = {
        // Convert 12-hour format to 24-hour format for storage
        val hour24 = when {
            selectedAmPm == 0 && selectedHour == 12 -> 0 // 12 AM = 00
            selectedAmPm == 1 && selectedHour != 12 -> selectedHour + 12 // PM (not 12)
            else -> selectedHour // AM (not 12) or 12 PM
        }

        val timeString = String.format("%02d:%02d", hour24, selectedMinute)
        val selectedDayNames = selectedDays.sorted().map { daysFullNames[it] }

        val schedule = SavedSchedule(
            id = "", // Will be generated by ViewModel
            name = scheduleName.ifBlank { "Untitled Schedule" },
            days = selectedDayNames,
            time = timeString,
            durationMinutes = selectedDuration,
            isActive = true
        )

        Log.d("ScheduleClean", "Saving schedule:")
        Log.d("ScheduleClean", "Time: $timeString (24-hour format)")
        Log.d("ScheduleClean", "Days: ${selectedDayNames.joinToString(", ")}")
        Log.d("ScheduleClean", "Name: ${schedule.name}")
        Log.d("ScheduleClean", "Duration: $selectedDuration minutes")

        viewModel.saveSchedule(schedule)
    }

    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) },
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Schedule Cleaning",
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Back"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface,
                    titleContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        },
        bottomBar = {
            ScheduleBottomBar(
                onCancelClick = onBackClick,
                onSaveClick = onSaveClick,
                isSaveEnabled = selectedDays.isNotEmpty() && !isLoading
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            DaySelector(
                selectedDays = selectedDays,
                onDaysChanged = { selectedDays = it }
            )

            TimePicker(
                selectedHour = selectedHour,
                selectedMinute = selectedMinute,
                selectedAmPm = selectedAmPm,
                onHourChanged = { selectedHour = it },
                onMinuteChanged = { selectedMinute = it },
                onAmPmChanged = { selectedAmPm = it }
            )

            DurationPicker(
                selectedMinutes = selectedDuration,
                onMinutesChanged = { selectedDuration = it }
            )

            ScheduleNameInput(
                scheduleName = scheduleName,
                onScheduleNameChanged = { scheduleName = it }
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewScheduleCleanScreen() {
    MaterialTheme {
        ScheduleCleanScreen()
    }
}